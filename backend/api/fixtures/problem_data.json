[
    {
        "model": "api.problem",
        "pk": 1,
        "fields": {
            "problem_name": "OOP Car",
            "language": "python",
            "length": "long",
            "words": [
                "class Car:",
                "def __init__(self, make, model, year, color):",
                "self.make = make",
                "self.model = model",
                "self.year = year",
                "self.color = color",
                "self.speed = 0",
                "",
                "def accelerate(self, increment):",
                "self.speed += increment",
                "",
                "def brake(self, decrement):",
                "self.speed -= decrement",
                "",
                "def display_info(self):",
                "print(f\"Make: {self.make}\")",
                "print(f\"Model: {self.model}\")",
                "print(f\"Year: {self.year}\")",
                "print(f\"Color: {self.color}\")",
                "print(f\"Speed: {self.speed} km/h\")",
                ""
            ],
            "tab_counts": [
                0,
                1,
                2,
                2,
                2,
                2,
                2,
                1,
                1,
                2,
                1,
                1,
                2,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                0
            ]
        }
    },
    {
        "model": "api.problem",
        "pk": 2,
        "fields": {
            "problem_name": "OOP Person",
            "language": "python",
            "length": "short",
            "words": [
                "class Person:",
                "def __init__(self, name, age):",
                "self.name = name",
                "self.age = age",
                "",
                "def introduce(self):",
                "print(f\"My name is {self.name} and I am {self.age} years old.\")",
                ""
            ],
            "tab_counts": [
                0,
                1,
                2,
                2,
                1,
                1,
                2,
                0
            ]
        }
    },
    {
        "model": "api.problem",
        "pk": 3,
        "fields": {
            "problem_name": "OOP Shape",
            "language": "go",
            "length": "medium",
            "words": [
                "package main",
                "",
                "import \"fmt\"",
                "",
                "type Shape interface {",
                "area() float64",
                "}",
                "",
                "type Rectangle struct {",
                "width  float64",
                "height float64",
                "}",
                "",
                "func (r Rectangle) area() float64 {",
                "return r.width * r.height",
                "}",
                "",
                "type Circle struct {",
                "radius float64",
                "}",
                "",
                "func (c Circle) area() float64 {",
                "return 3.14 * c.radius * c.radius",
                "}",
                "",
                "func main() {",
                "rectangle := Rectangle{width: 5, height: 10}",
                "circle := Circle{radius: 7}",
                "",
                "shapes := []Shape{rectangle, circle}",
                "",
                "for _, shape := range shapes {",
                "fmt.Println(\"Area:\", shape.area())",
                "}",
                "}",
                ""
            ],
            "tab_counts": [
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                0,
                1,
                2,
                1,
                0,
                0
            ]
        }
    },
    {
        "model": "api.problem",
        "pk": 4,
        "fields": {
            "problem_name": "OOP Fruits",
            "language": "go",
            "length": "medium",
            "words": [
                "package main",
                "",
                "import \"fmt\"",
                "",
                "type Fruit interface {",
                "Eat()",
                "}",
                "",
                "type Apple struct {",
                "Variety string",
                "}",
                "",
                "func (a Apple) Eat() {",
                "fmt.Println(\"Eating\", a.Variety, \"apple.\")",
                "}",
                "",
                "type Banana struct {",
                "Size string",
                "}",
                "",
                "func (b Banana) Eat() {",
                "fmt.Println(\"Eating\", b.Size, \"banana.\")",
                "}",
                "",
                "func main() {",
                "apple := Apple{Variety: \"Red Delicious\"}",
                "banana := Banana{Size: \"Large\"}",
                "",
                "fruits := []Fruit{apple, banana}",
                "",
                "for _, fruit := range fruits {",
                "fruit.Eat()",
                "}",
                "}",
                ""
            ],
            "tab_counts": [
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                0,
                1,
                2,
                1,
                0,
                0
            ]
        }
    },
    {
        "model": "api.problem",
        "pk": 5,
        "fields": {
            "problem_name": "OOP Vehicle",
            "language": "go",
            "length": "medium",
            "words": [
                "package main",
                "",
                "import \"fmt\"",
                "",
                "type Vehicle interface {",
                "Accelerate()",
                "Brake()",
                "}",
                "",
                "type Car struct {",
                "Brand string",
                "}",
                "",
                "func (c Car) Accelerate() {",
                "fmt.Println(c.Brand, \"is accelerating.\")",
                "}",
                "",
                "func (c Car) Brake() {",
                "fmt.Println(c.Brand, \"is braking.\")",
                "}",
                "",
                "type Bike struct {",
                "Type string",
                "}",
                "",
                "func (b Bike) Accelerate() {",
                "fmt.Println(\"The\", b.Type, \"is accelerating.\")",
                "}",
                "",
                "func (b Bike) Brake() {",
                "fmt.Println(\"The\", b.Type, \"is braking.\")",
                "}",
                "",
                "func main() {",
                "car := Car{Brand: \"Toyota\"}",
                "bike := Bike{Type: \"Mountain bike\"}",
                "",
                "vehicles := []Vehicle{car, bike}",
                "",
                "for _, v := range vehicles {",
                "v.Accelerate()",
                "v.Brake()",
                "fmt.Println()",
                "}",
                "}",
                ""
            ],
            "tab_counts": [
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                0,
                1,
                2,
                2,
                2,
                1,
                0,
                0
            ]
        }
    },
    {
        "model": "api.problem",
        "pk": 6,
        "fields": {
            "problem_name": "OOP Perimeter",
            "language": "go",
            "length": "long",
            "words": [
                "package main",
                "",
                "import \"fmt\"",
                "",
                "type Shape interface {",
                "Area() float64",
                "Perimeter() float64",
                "}",
                "",
                "type Rectangle struct {",
                "Width  float64",
                "Height float64",
                "}",
                "",
                "func (r Rectangle) Area() float64 {",
                "return r.Width * r.Height",
                "}",
                "",
                "func (r Rectangle) Perimeter() float64 {",
                "return 2*r.Width + 2*r.Height",
                "}",
                "",
                "type Circle struct {",
                "Radius float64",
                "}",
                "",
                "func (c Circle) Area() float64 {",
                "return 3.14 * c.Radius * c.Radius",
                "}",
                "",
                "func (c Circle) Perimeter() float64 {",
                "return 2 * 3.14 * c.Radius",
                "}",
                "",
                "func main() {",
                "rectangle := Rectangle{Width: 5, Height: 10}",
                "circle := Circle{Radius: 7}",
                "",
                "shapes := []Shape{rectangle, circle}",
                "",
                "for _, shape := range shapes {",
                "fmt.Printf(\"Area: %.2f",
                "\", shape.Area())",
                "fmt.Printf(\"Perimeter: %.2f",
                "",
                "\", shape.Perimeter())",
                "}",
                "}",
                ""
            ],
            "tab_counts": [
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                0,
                1,
                2,
                0,
                2,
                0,
                0,
                1,
                0,
                0
            ]
        }
    },
    {
        "model": "api.problem",
        "pk": 7,
        "fields": {
            "problem_name": "OOP Shape",
            "language": "python",
            "length": "long",
            "words": [
                "class Shape:",
                "def area(self):",
                "pass",
                "",
                "def perimeter(self):",
                "pass",
                "",
                "",
                "class Rectangle(Shape):",
                "def __init__(self, width, height):",
                "self.width = width",
                "self.height = height",
                "",
                "def area(self):",
                "return self.width * self.height",
                "",
                "def perimeter(self):",
                "return 2 * (self.width + self.height)",
                "",
                "",
                "class Circle(Shape):",
                "def __init__(self, radius):",
                "self.radius = radius",
                "",
                "def area(self):",
                "return 3.14 * self.radius * self.radius",
                "",
                "def perimeter(self):",
                "return 2 * 3.14 * self.radius",
                "",
                "",
                "rectangle = Rectangle(5, 10)",
                "circle = Circle(7)",
                "",
                "shapes = [rectangle, circle]",
                "",
                "for shape in shapes:",
                "print(\"Area:\", shape.area())",
                "print(\"Perimeter:\", shape.perimeter())",
                "print()",
                ""
            ],
            "tab_counts": [
                0,
                1,
                2,
                0,
                1,
                2,
                0,
                0,
                0,
                1,
                2,
                2,
                0,
                1,
                2,
                0,
                1,
                2,
                0,
                0,
                0,
                1,
                2,
                0,
                1,
                2,
                0,
                1,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0
            ]
        }
    },
    {
        "model": "api.problem",
        "pk": 8,
        "fields": {
            "problem_name": "OOP Vehicle",
            "language": "python",
            "length": "medium",
            "words": [
                "class Vehicle:",
                "def __init__(self, brand):",
                "self.brand = brand",
                "",
                "def accelerate(self):",
                "print(self.brand, \"is accelerating.\")",
                "",
                "def brake(self):",
                "print(self.brand, \"is braking.\")",
                "",
                "",
                "class Car(Vehicle):",
                "pass",
                "",
                "",
                "class Bike(Vehicle):",
                "pass",
                "",
                "",
                "car = Car(\"Toyota\")",
                "bike = Bike(\"Mountain bike\")",
                "",
                "vehicles = [car, bike]",
                "",
                "for vehicle in vehicles:",
                "vehicle.accelerate()",
                "vehicle.brake()",
                "print()",
                ""
            ],
            "tab_counts": [
                0,
                1,
                2,
                0,
                1,
                2,
                0,
                1,
                2,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0
            ]
        }
    },
    {
        "model": "api.problem",
        "pk": 9,
        "fields": {
            "problem_name": "OOP Vehicle",
            "language": "typescript",
            "length": "long",
            "words": [
                "interface Vehicle {",
                "accelerate(): void",
                "brake(): void",
                "}",
                "",
                "class Car implements Vehicle {",
                "constructor(private brand: string) {}",
                "",
                "accelerate(): void {",
                "console.log(this.brand, \"is accelerating.\")",
                "}",
                "",
                "brake(): void {",
                "console.log(this.brand, \"is braking.\")",
                "}",
                "}",
                "",
                "class Bike implements Vehicle {",
                "constructor(private type: string) {}",
                "",
                "accelerate(): void {",
                "console.log(\"The\", this.type, \"is accelerating.\")",
                "}",
                "",
                "brake(): void {",
                "console.log(\"The\", this.type, \"is braking.\")",
                "}",
                "}",
                "",
                "const car: Vehicle = new Car(\"Toyota\")",
                "const bike: Vehicle = new Bike(\"Mountain bike\")",
                "",
                "const vehicles: Vehicle[] = [car, bike]",
                "",
                "vehicles.forEach((vehicle) => {",
                "vehicle.accelerate()",
                "vehicle.brake()",
                "console.log()",
                "})",
                ""
            ],
            "tab_counts": [
                0,
                1,
                1,
                0,
                0,
                0,
                1,
                0,
                1,
                2,
                1,
                0,
                1,
                2,
                1,
                0,
                0,
                0,
                1,
                0,
                1,
                2,
                1,
                0,
                1,
                2,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                0
            ]
        }
    },
    {
        "model": "api.problem",
        "pk": 10,
        "fields": {
            "problem_name": "OOP Animal",
            "language": "typescript",
            "length": "long",
            "words": [
                "interface Animal {",
                "eat(): void",
                "sleep(): void",
                "}",
                "",
                "class Dog implements Animal {",
                "constructor(private name: string) {}",
                "",
                "eat(): void {",
                "console.log(this.name, \"is eating.\")",
                "}",
                "",
                "sleep(): void {",
                "console.log(this.name, \"is sleeping.\")",
                "}",
                "}",
                "",
                "class Cat implements Animal {",
                "constructor(private name: string) {}",
                "",
                "eat(): void {",
                "console.log(this.name, \"is eating.\")",
                "}",
                "",
                "sleep(): void {",
                "console.log(this.name, \"is sleeping.\")",
                "}",
                "}",
                "",
                "const dog: Animal = new Dog(\"Max\")",
                "const cat: Animal = new Cat(\"Whiskers\")",
                "",
                "const animals: Animal[] = [dog, cat]",
                "",
                "animals.forEach((animal) => {",
                "animal.eat()",
                "animal.sleep()",
                "console.log()",
                "})",
                ""
            ],
            "tab_counts": [
                0,
                1,
                1,
                0,
                0,
                0,
                1,
                0,
                1,
                2,
                1,
                0,
                1,
                2,
                1,
                0,
                0,
                0,
                1,
                0,
                1,
                2,
                1,
                0,
                1,
                2,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                0
            ]
        }
    },
    {
        "model": "api.problem",
        "pk": 11,
        "fields": {
            "problem_name": "Test (1 line)",
            "language": "python",
            "length": "short",
            "words": [
                "print(\"abcd\")"
            ],
            "tab_counts": [
                0
            ]
        }
    }
]